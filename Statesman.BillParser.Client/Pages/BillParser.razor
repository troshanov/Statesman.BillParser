@page "/bill-parser/{id:int}"

@using MudBlazor

@inject IBillsService billsService

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Legislation Builder</MudText>

        <MudTextField @bind-Value="lawTitle"
                      Label="Law Title"
                      Variant="Variant.Outlined"
                      Class="mb-4" />

        <MudTextField @bind-Value="legalBasis"
                      Label="Legal Basis"
                      Variant="Variant.Outlined"
                      Lines="5"
                      Class="mb-4" />

        <MudTextField @bind-Value="promulgation"
                      Label="Promulgation"
                      Variant="Variant.Outlined"
                      Lines="3"
                      Class="mb-4" />

        <MudText Typo="Typo.h5" Class="mb-4">Bill Content</MudText>
        @foreach (var element in legislativeElements)
        {
            <MudPaper Class="pa-4 mb-3" Style="@($"margin-left: {element.Level * 20}px")">
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect T="string" Label="Element Type"
                                   @bind-Value="element.Type"
                                   Variant="Variant.Outlined"
                                   Class="mb-2">
                            @foreach (var type in GetAllowedTypes(element))
                            {
                                <MudSelectItem Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>

                        @if (element.Type == "Chapter" || element.Type == "Paragraph" || element.Type == "Section")
                        {
                            <MudText Class="mb-2">Number: @element.Number</MudText>
                            <MudTextField @bind-Value="element.Title"
                                          Label="Title"
                                          Class="mb-2" />
                        }
                        else if (element.Type == "Article")
                        {
                            <MudText Class="mb-2">Article @element.Number</MudText>
                            <MudTextField @bind-Value="element.Content"
                                          Label="Content"
                                          Lines="3"
                                          Class="mb-2" />
                        }
                        else if (element.Type == "Item")
                        {
                            <MudText Class="mb-2">Item @element.Number</MudText>
                            <MudTextField @bind-Value="element.Content"
                                          Label="Content"
                                          Lines="2"
                                          Class="mb-2" />
                        }
                        else if (element.Type == "Letter")
                        {
                            <MudText Class="mb-2">Letter @element.Letter</MudText>
                            <MudTextField @bind-Value="element.Content"
                                          Label="Content"
                                          Lines="2"
                                          Class="mb-2" />
                        }

                        <MudStack Row>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           OnClick="@(() => RemoveElement(element))" />

                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Color="Color.Success"
                                           OnClick="@(() => AddSubElement(element))" />
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }

        <MudButton StartIcon="@Icons.Material.Filled.Add"
                   Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="@AddTopLevelElement"
                   Class="mt-4">
            Add New Element
        </MudButton>

        <MudTextField @bind-Value="motives"
                      Label="Motives"
                      Variant="Variant.Outlined"
                      Lines="5"
                      Class="mb-4" />

        <MudTextField @bind-Value="assessments"
                      Label="Assessments"
                      Variant="Variant.Outlined"
                      Lines="5"
                      Class="mb-4" />

        <MudDivider Class="my-4" />

        <MudButton Color="Color.Secondary"
                   Variant="Variant.Filled"
                   OnClick="SaveLegislation">
            Save Legislation
        </MudButton>
    </MudPaper>
</MudContainer>

@code {
    private string? lawTitle;
    private string? legalBasis;
    private string? promulgation;
    private string? motives;
    private string? assessments;

    private List<LegislativeElement> legislativeElements = new();

    private class LegislativeElement
    {
        public string Type { get; set; } = "Chapter";
        public int Number { get; set; } = 1;
        public string? Title { get; set; }
        public string? Content { get; set; }
        public char Letter { get; set; } = 'A';
        public int Level { get; set; }
        public LegislativeElement? Parent { get; set; }
        public Guid Id { get; set; } = Guid.NewGuid();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (Id != 0)
        {
            var bill = await billsService.GetBillAsync(Id);
            lawTitle = bill.Title;
        }
    }

    [Parameter]
    public int Id { get; set; }

    private string[] GetAllowedTypes(LegislativeElement element)
    {
        if (element.Level == 0)
            return new[] { "Chapter", "Paragraph" };

        if (element.Parent?.Type == "Chapter")
            return new[] { "Section", "Paragraph" };

        if (element.Parent?.Type == "Section")
            return new[] { "Paragraph" };

        if (element.Parent?.Type == "Paragraph")
            return new[] { "Item" };

        if (element.Parent?.Type == "Item")
            return new[] { "Letter" };

        if (element.Parent?.Type == "Item")
            return new[] { "Letter" };

        return new[] { "Misc" };
    }

    private List<LegislativeElement> GetSiblings(LegislativeElement element)
    {
        return legislativeElements.Where(e =>
            e.Level == element.Level &&
            e.Parent?.Id == element.Parent?.Id &&
            e.Type == element.Type).ToList();
    }

    private int GetNextNumber(LegislativeElement element)
    {
        var siblings = GetSiblings(element);

        if (!siblings.Any())
            return 1;

        var lastNumber = siblings.Max(s => s.Number);
        return lastNumber + 1;
    }

    private char GetNextLetter(LegislativeElement element)
    {
        var siblings = GetSiblings(element);

        if (!siblings.Any())
            return 'A';

        var lastLetter = siblings.Max(s => s.Letter);

        return (char)(lastLetter + 1);
    }

    private void AddTopLevelElement()
    {
        var newElement = new LegislativeElement
            {
                Level = 0,
                Number = GetNextNumber(new LegislativeElement { Level = 0 })
            };

        InsertElementInOrder(newElement);
    }

    private void AddSubElement(LegislativeElement parent)
    {
        var newElement = new LegislativeElement
            {
                Level = parent.Level + 1,
                Parent = parent,
                Type = parent.Type == "Article" ? "Item" :
                                               parent.Type == "Item" ? "Letter" : "Article"
            };

        // Reset numbering for child elements
        if (newElement.Type == "Letter")
        {
            newElement.Letter = GetNextLetter(newElement);
        }
        else
        {
            newElement.Number = GetNextNumber(newElement);
        }

        InsertElementInOrder(newElement);
    }

    private void InsertElementInOrder(LegislativeElement newElement)
    {
        var siblings = GetSiblings(newElement);
        var insertIndex = legislativeElements.Count;

        if (siblings.Any())
        {
            var lastSibling = siblings.Last();
            insertIndex = legislativeElements.IndexOf(lastSibling) + 1;

            // Find the correct position based on number/letter
            foreach (var sibling in siblings)
            {
                if (CompareElements(newElement, sibling) < 0)
                {
                    insertIndex = legislativeElements.IndexOf(sibling);
                    break;
                }
            }
        }
        else if (newElement.Parent != null)
        {
            // Insert after parent if this is the first child
            insertIndex = legislativeElements.IndexOf(newElement.Parent) + 1;
        }

        legislativeElements.Insert(insertIndex, newElement);
    }

    private int CompareElements(LegislativeElement a, LegislativeElement b)
    {
        if (a.Type == "Letter" && b.Type == "Letter")
            return string.Compare(a.Letter.ToString(), b.Letter.ToString());

        return a.Number.CompareTo(b.Number);
    }

    private void RemoveElement(LegislativeElement element)
    {
        // Remove element and all its children
        var elementsToRemove = legislativeElements
            .Where(e => IsChildOf(e, element) || e == element)
            .ToList();

        foreach (var elementToRemove in elementsToRemove)
        {
            legislativeElements.Remove(elementToRemove);
        }

        RenumberElements();
    }

    private void RenumberElements()
    {
        var groups = legislativeElements.GroupBy(e => new { e.Level, e.Parent?.Id, e.Type });
        foreach (var group in groups)
        {
            var number = 1;
            var letter = 'A';
            foreach (var element in group.OrderBy(e => e.Type == "Letter" ? e.Letter : e.Number))
            {
                if (element.Type == "Letter")
                {
                    element.Letter = letter;
                    letter++;
                }
                else
                {
                    element.Number = number;
                    number++;
                }
            }
        }
    }

    private bool IsChildOf(LegislativeElement potential, LegislativeElement parent)
    {
        var current = potential.Parent;
        while (current != null)
        {
            if (current.Id == parent.Id)
                return true;
            current = current.Parent;
        }
        return false;
    }

    private async Task SaveLegislation()
    {
        // TODO: Implement save logic
        await Task.CompletedTask;
    }
}