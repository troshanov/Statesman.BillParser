@page "/bill-parser/{id:int}"

@using MudBlazor
@using Statesman.BillParser.Shared.Models.BillElements;
@using Statesman.BillParser.Shared.Models;
@using Statesman.BillParser.Client.Utilities

@inject IBillsService billsService

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Legislation Builder</MudText>

        <MudTextField @bind-Value="LawTitle"
        Label="Law Title"
        Variant="Variant.Outlined"
        Class="mb-4" />

        <MudTextField @bind-Value="LegalBasis"
        Label="Legal Basis"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudTextField @bind-Value="Promulgation"
        Label="Promulgation"
        Variant="Variant.Outlined"
        Lines="3"
        Class="mb-4" />

        <MudText Typo="Typo.h5" Class="mb-4">Bill Text</MudText>

        @foreach (var node in billElementForest)
        {
            <BillElementTreeNode Node="node" OnAdd="AddSubElement" OnRemove="RemoveElement"></BillElementTreeNode>
        }
        
        <MudButton StartIcon="@Icons.Material.Filled.Add"
        Color="Color.Primary"
        Variant="Variant.Filled"
        OnClick="@AddTopLevelElement"
        Class="mt-4">
            Add New Element
        </MudButton>

        <MudTextField @bind-Value="Motives"
        Label="Motives"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudTextField @bind-Value="Assessments"
        Label="Assessments"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudDivider Class="my-4" />

        <MudButton Color="Color.Secondary"
        Variant="Variant.Filled"
        OnClick="SaveLegislation">
            Save Legislation
        </MudButton>
    </MudPaper>
</MudContainer>

@code {
    public string LawTitle {get; set;}
    public string? LegalBasis { get; set; }
    public string? Promulgation { get; set; }
    public string? Motives { get; set; }
    public string? Assessments { get; set; }
    private List<BillElementNode> billElementForest = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        var bill = await billsService.GetBillAsync(Id);
        LawTitle = bill.Title;
    }

    [Parameter]
    public required int Id { get; set; }

    private void AddTopLevelElement()
    {
        var newEl = new BillElement
            {
                Text = string.Empty,
                Marker = string.Empty,
                Type = BillElementType.Chapter
            };

        var lastNode = billElementForest.LastOrDefault();
        SetMarker(newEl, lastNode?.Value);
                    
        billElementForest.Add(new BillElementNode(newEl));
        StateHasChanged();
    }

    private void AddSubElement(BillElementNode parent)
    {
        var newChild = new BillElement
            {
                Text = string.Empty,
                Marker = string.Empty,
            //TODO: Solution for Letter type
                Type = BillElementTypeUtility.DefaultTypes[parent.Value.Type]
            };

        var lastChild = parent.Children.LastOrDefault();
        SetMarker(newChild, lastChild?.Value);

        parent.AddChild(newChild);
    }

    private void RemoveElement(BillElementNode node)
    {
        if (node.Parent == null)
        {
            billElementForest.Remove(node);
            RenumberForestElements();
            return;
        }
        else
        {
            node.Parent.RemoveChild(node);
        }
    }

    private void SetMarker(BillElement newChild, BillElement? lastChild)
    {
        if (lastChild != null)
        {
            var markerIsInt = int.TryParse(lastChild.Marker, out var intMarker);
            if (markerIsInt)
            {
                intMarker++;
                newChild.Marker = intMarker.ToString();
            }
            else
            {
                var charMarker = lastChild.Marker[0];
                charMarker++;
                newChild.Marker = charMarker.ToString();
            }
        }
        else
        {
            var marker = newChild.Type == BillElementType.Letter ? "A" : "1";
            newChild.Marker = marker;
        }
    }

    private void RenumberForestElements()
    {
        var useLetters = false;
        if (billElementForest.Count > 0)
            useLetters = billElementForest[0].Value.Type == BillElementType.Letter;

        for (int i = 0; i < billElementForest.Count; i++)
        {
            if (useLetters)
            {
                char letter = (char)('a' + i);
                billElementForest[i].Value.Marker = letter.ToString();
            }
            else
            {
                billElementForest[i].Value.Marker = (i + 1).ToString();
            }
        }
    }

    private async Task SaveLegislation()
    {
        var legislation = new ParsedBillDto
        {
            Id = Id,
            LawTitle = LawTitle,
            LegalBasis = LegalBasis,
            Promulgation = Promulgation,
            Motives = Motives,
            Assessments = Assessments,
            BillElements = billElementForest
        };

        var success = await billsService.SaveLegislationAsync(legislation);
        
        if (success)
        {
            // TODO: Show success message to user
            // You might want to use MudBlazor's ISnackbar service here
        }
        else
        {
            // TODO: Show error message to user
            // You might want to use MudBlazor's ISnackbar service here
        }
    }
}