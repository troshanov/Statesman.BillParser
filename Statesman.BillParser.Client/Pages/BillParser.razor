@page "/bill-parser/{id:int}"

@using MudBlazor
@using Statesman.BillParser.Client.Models.BillElements
@using Statesman.BillParser.Client.Utilities

@inject IBillsService billsService

<MudContainer MaxWidth="MaxWidth.False" Class="pa-4">
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h4" Class="mb-4">Legislation Builder</MudText>

        <MudTextField @bind-Value="lawTitle"
        Label="Law Title"
        Variant="Variant.Outlined"
        Class="mb-4" />

        <MudTextField @bind-Value="legalBasis"
        Label="Legal Basis"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudTextField @bind-Value="promulgation"
        Label="Promulgation"
        Variant="Variant.Outlined"
        Lines="3"
        Class="mb-4" />

        <MudText Typo="Typo.h5" Class="mb-4">Bill Content</MudText>

        @foreach (var node in billElementForest)
        {
            <BillElementTreeNode Node="node" OnAdd="AddSubElement" OnRemove="RemoveElement"></BillElementTreeNode>
        }

        @* 
        <MudDropContainer T="BillElementNode"
                          Items="billElementForest"
                          ItemsSelector="@((item, dropzone) => item.Value.Type.ToString() == dropzone)"
                          Class="d-flex flex-column">
            <ChildContent>
                @if (billElementForest.Any())
                {
                    <MudDropZone T="BillElementNode"
                                 Identifier="@(billElementForest.FirstOrDefault()!.Value.Type.ToString())"
                                 Class="pa-2"
                                 Style="min-height: 50px;"
                                 AllowReorder="true">
                    </MudDropZone>
                }
            </ChildContent>
            <ItemRenderer>
            </ItemRenderer>
        </MudDropContainer> *@

        <MudButton StartIcon="@Icons.Material.Filled.Add"
        Color="Color.Primary"
        Variant="Variant.Filled"
        OnClick="@AddTopLevelElement"
        Class="mt-4">
            Add New Element
        </MudButton>

        <MudTextField @bind-Value="motives"
        Label="Motives"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudTextField @bind-Value="assessments"
        Label="Assessments"
        Variant="Variant.Outlined"
        Lines="5"
        Class="mb-4" />

        <MudDivider Class="my-4" />

        <MudButton Color="Color.Secondary"
        Variant="Variant.Filled"
        OnClick="SaveLegislation">
            Save Legislation
        </MudButton>

        @*   <MudDropContainer T="LegislativeElement"
                          Items="legislativeElements"
                          ItemsSelector="@((item, dropzone) => item.Level.ToString() == dropzone)"
                          ItemDropped="HandleItemDropped"
                          Class="d-flex flex-column">
            <ChildContent>
                @for (int i = 0; i <= MaxLevel; i++)
                {
                    var level = i;  // Capture for lambda
                    <MudDropZone T="LegislativeElement"
                                 Identifier="@level.ToString()"
                                 Class="pa-2"
                                 Style="min-height: 50px;"
                                 AllowReorder="true">
                        <MudText Typo="Typo.subtitle1" Class="mb-2">Level @level Elements</MudText>
                    </MudDropZone>
                }
            </ChildContent>
            <ItemRenderer>
                <MudPaper Class="pa-4 mb-3" Style="@($"margin-left: {context.Level * 20}px")">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudSelect T="string" Label="Element Type"
                                       @bind-Value="context.Type"
                                       Variant="Variant.Outlined"
                                       Class="mb-2">
                                @foreach (var type in GetAllowedTypes(context))
                                {
                                    <MudSelectItem Value="@type">@type</MudSelectItem>
                                }
                            </MudSelect>

                            @if (context.Type == "Chapter" || context.Type == "Paragraph" || context.Type == "Section")
                            {
                                <MudText Class="mb-2">Number: @context.Number</MudText>
                                <MudTextField @bind-Value="context.Title"
                                              Label="Title"
                                              Class="mb-2" />
                            }
                            else if (context.Type == "Article")
                            {
                                <MudText Class="mb-2">Article @context.Number</MudText>
                                <MudTextField @bind-Value="context.Content"
                                              Label="Content"
                                              Lines="3"
                                              Class="mb-2" />
                            }
                            else if (context.Type == "Item")
                            {
                                <MudText Class="mb-2">Item @context.Number</MudText>
                                <MudTextField @bind-Value="context.Content"
                                              Label="Content"
                                              Lines="2"
                                              Class="mb-2" />
                            }
                            else if (context.Type == "Letter")
                            {
                                <MudText Class="mb-2">Letter @context.Letter</MudText>
                                <MudTextField @bind-Value="context.Content"
                                              Label="Content"
                                              Lines="2"
                                              Class="mb-2" />
                            }

                            <MudStack Row>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="@(() => RemoveElement(context))" />

                                <MudIconButton Icon="@Icons.Material.Filled.Add"
                                               Color="Color.Success"
                                               OnClick="@(() => AddSubElement(context))" />
                            </MudStack>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </ItemRenderer>
        </MudDropContainer> *@
    </MudPaper>
</MudContainer>

@functions {
}

@code {
    private string? lawTitle;
    private string? legalBasis;
    private string? promulgation;
    private string? motives;
    private string? assessments;

    private List<LegislativeElement> legislativeElements = new();
    private List<BillElementNode> billElementForest = new();

    // Track the maximum level for drop zones
    private int MaxLevel => legislativeElements.Any() ? legislativeElements.Max(e => e.Level) : 0;

    private class LegislativeElement
    {
        public string Type { get; set; } = "Chapter";
        public int Number { get; set; } = 1;
        public string? Title { get; set; }
        public string? Content { get; set; }
        public char Letter { get; set; } = 'A';
        public int Level { get; set; }
        public LegislativeElement? Parent { get; set; }
        public Guid Id { get; set; } = Guid.NewGuid();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (Id != 0)
        {
            var bill = await billsService.GetBillAsync(Id);
            lawTitle = bill.Title;
        }
    }

    [Parameter]
    public int Id { get; set; }

    private void AddTopLevelElement()
    {
        var newEl = new BillElement
            {
                Content = string.Empty,
                Marker = string.Empty,
                Type = BillElementType.Chapter
            };

        var lastNode = billElementForest.LastOrDefault();
        SetMarker(newEl, lastNode?.Value);

        billElementForest.Add(new BillElementNode(newEl));
    }

    private void AddSubElement(BillElementNode parent)
    {
        var newChild = new BillElement
            {
                Content = string.Empty,
                Marker = string.Empty,
            //TODO: Solution for Letter type
                Type = BillElementTypeUtility.DefaultTypes[parent.Value.Type]
            };

        var lastChild = parent.Children.LastOrDefault();
        SetMarker(newChild, lastChild?.Value);

        parent.AddChild(newChild);
    }

    private void RemoveElement(BillElementNode node)
    {
        if (node.Parent == null)
        {
            billElementForest.Remove(node);
            RenumberForestElements();
            return;
        }
        else
        {
            node.Parent.RemoveChild(node);
        }
    }

    private void SetMarker(BillElement newChild, BillElement? lastChild)
    {
        if (lastChild != null)
        {
            var markerIsInt = int.TryParse(lastChild.Marker, out var intMarker);
            if (markerIsInt)
            {
                intMarker++;
                newChild.Marker = intMarker.ToString();
            }
            else
            {
                var charMarker = lastChild.Marker[0];
                charMarker++;
                lastChild.Marker = charMarker.ToString();
            }
        }
        else
        {
            var marker = newChild.Type == BillElementType.Letter ? "A" : "1";
            newChild.Marker = marker;
        }
    }

    private void RenumberForestElements()
    {
        var useLetters = false;
        if (billElementForest.Count > 0)
            useLetters = billElementForest[0].Value.Type == BillElementType.Letter;

        for (int i = 0; i < billElementForest.Count; i++)
        {
            if (useLetters)
            {
                char letter = (char)('a' + i);
                billElementForest[i].Value.Marker = letter.ToString();
            }
            else
            {
                billElementForest[i].Value.Marker = (i + 1).ToString();
            }
        }
    }

    private string[] GetAllowedTypes(BillElementType type) => BillElementTypeUtility.DropDownAllowedTypes[type].Select(t => t.ToString()).ToArray();

    private async Task SaveLegislation()
    {
        // TODO: Implement save logic
        await Task.CompletedTask;
    }
}